impcore = { SOI ~ ( top_level_expr )* ~ EOI }

// CONSTANTS
WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }

// LITERALS, VARIABLES, FUNCTIONS
CHAR = _{ ASCII_ALPHANUMERIC | "_" }
literal = @{ ( "+" | "-" )? ~ ASCII_DIGIT+ }
var_name = @{ ASCII_ALPHA ~ ( CHAR | "-" )* ~ CHAR* }
func_name = @{ ASCII_ALPHA ~ ( CHAR | "-" )* ~ CHAR* ~ "?"? }

// OPERATIONS
unary_op = { "++" | "--" | "@" | "not" | "!" }
arithmetic_op = { "+" | "-" | "/" | "*" | "%" | "mod" }
bitwise_op = { ">>" | "<<" | "^" | "&" | "|" }
comparison_op = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }
assign_op = { "set" | "$" }
// group for readability
binary_op = _{ comparison_op | arithmetic_op | bitwise_op | assign_op } 

// DEFINITION TYPES
val_def = { "val" ~ var_name ~ arg }
param_def = { "(" ~ var_name* ~ ")" }
func_def = { "define" ~ func_name ~ param_def ~ arg }

// TEST TYPES
assert_test = { "check-assert" ~ arg } 
expect_test = { "check-expect" ~ arg{2} }
error_test = { "check-error" ~ arg }

// EXPRESSION TYPES
error = { "error" }
unary = { unary_op ~ arg }
binary = { binary_op ~ arg ~ arg }
if = { "if" ~ arg{3} }
while = { "while" ~ arg{2} }
begin = { "begin" ~ arg+ }
user = { func_name ~ arg+ }

// HIGH LEVEL CONTAINERS
arg = _{ expr | literal | var_name }
top_level_expr = _{ def | test | expr  }

// TOP LEVEL TYPES
def = { "(" ~ ( val_def | func_def ) ~ ")" }
test = { "(" ~ ( assert_test | expect_test | error_test ) ~ ")" }
expr = { "(" ~ ( error | unary | binary | if | while | user ) ~ ")" }
