impcore = { SOI ~ def* ~ EOI }

COMMENT    = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
WHITESPACE = _{ " " 
              | "\t"
              | NEWLINE }

NUMBER = @{ ( "-" )?  ~ ASCII_DIGIT+ }
HEXNUM = @{ ( "-" )? ~ "0x" ~ ASCII_HEX_DIGIT+ }
BINNUM = @{ ( "-" )? ~ "0b" ~ ("0" | "1")+ }
NAME = @{ !(keyword ~ " ") ~ !ASCII_DIGIT ~ &(ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" | "-" )* }
PTR  = @{ NAME ~ "[" }
FILENAME = @{ ( LETTER | SYMBOL | MARK | "." | "/" )* }

keyword  = @{ "begin"
            | "define"
            | "if"
            | "set"
            | "val"
            | "while"
            | "match"
            | "inline"
            | "replace"
            | "import"
            | "it"
            | "undef"
            | "check-assert"
            | "check-expect"
            | binary
            | unary }
            
unary = @{ "++"
         | "--"
         | "not"
         | "!"
         | "~"
         | "println"
         | "printc"
         | "print" }

binary = @{ "/"
          | "*"
          | "%"
          | "mod"
          | "udiv"
          | ">>>" 
          | ">>" 
          | "<<" 
          | "^" 
          | "&&" 
          | "||" 
          | "&" 
          | "|"
          | ">=" 
          | "<="
          | ">" 
          | "<" 
          | "="
          | "+"
          | "-"  }
             
lit   = @{ HEXNUM
		 | BINNUM
         | NUMBER }
macrox = @{ "'" ~ NAME }
var    =  { PTR ~ exp ~ "]"
          | NAME ~ !"[]" }
apply  =  { (macrox | var) ~ (exp | param)* 
          | binary ~ exp ~ exp 
          | unary ~ exp }
ifx    =  { "if" ~ exp ~ exp ~ exp }
whilex =  { "while" ~ exp ~ exp }
begin  =  { "begin" ~ exp* }
set    =  { "set" ~ var ~ exp }
case   =  { "(" ~ !"_" ~ exp ~ "=>" ~ exp ~ ")" }
matchx =  { "match" ~ exp ~ case* ~ "(" ~ "_" ~ "=>" ~ exp ~ ")" }

exp = { lit
      | var
      | macrox
      | "(" ~ ( ifx
              | whilex
              | begin
              | set
              | matchx
              | apply ) ~ ")" }

param   = { PTR ~ "]"
		  	  | NAME }
define  = { "define" ~ var ~ "(" ~ param* ~ ")" ~ exp }
val     = { "val" ~ param ~ exp }
expect  = { "check-expect" ~ exp ~ exp }
assert  = { "check-assert" ~ exp }
alias   = { "replace" ~ macrox ~ exp }
inline  = { "replace" ~ "(" ~ macrox ~ param* ~ ")" ~ exp }
undef  =  { "undef" ~ macrox }
import  = { "import" ~ ( "\"" ~ FILENAME ~ "\""
                       | var ) }

def = { "(" ~ ( define 
              | val
              | expect 
              | assert ) ~ ")"
      | "#(" ~ ( alias 
      		     | undef
               | inline 
               | import ) ~ ")"
      | exp }

