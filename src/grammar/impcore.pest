impcore = { SOI ~ ( def | exp )* ~ EOI }

// SILENTS
WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
NAMECHAR = _{ ASCII_ALPHANUMERIC | "_" } // helper

// RESERVED KEYWORDS INDEX
RESERVED = _{ TEST_KEYWORDS | PRIM_KEYWORDS | EXP_KEYWORDS | DEF_KEYWORDS }
TEST_KEYWORDS = _{ "check-assert" | "check-error" | "check-expect" }
PRIM_KEYWORDS = _{ binary | unary | "error" }
EXP_KEYWORDS = _{ "if" | "while" | "set" | "begin" }
DEF_KEYWORDS = _{ "define" | "val" | "use" }

// LITERALS, VARIABLES
name = @{ ASCII_ALPHA ~ ( NAMECHAR | "-" )* ~ NAMECHAR* }
func_name = @{ name ~ "?"? }
file_name = @{ ASCII_ALPHANUMERIC ~ ( NAMECHAR | "-" | "." )* }
integer_literal = @{ ( "+" | "-" )? ~ ASCII_DIGIT+ }
variable = @{ name }
parameter = @{ name }

// OPERATORS
arithmetic = { "+" | "-" | "/" | "*" | "%" }
bitwise = { ">>" | "<<" | "^" | "&" | "|" }
comparison = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }
assignment = { "set" | "$" }

// FUNCTIONS
unary = @{ "++" | "--" | "@" | "not" | "!" }
binary = @{ comparison | arithmetic | bitwise | assignment } 
primitive = _{ unary{1} | binary{1} }
user = @{ !RESERVED ~ func_name }

// EXPRESSION TYPES
exp = { integer_literal | error | variable | set | ifx | whilex | begin | function }

error = { "(" ~ "error" ~ ")" }                                                             
set = { "(" ~ "set" ~ variable ~ exp ~ ")" }
ifx = { "(" ~ "if" ~ exp{3} ~ ")" }
whilex = { "(" ~ "while" ~ exp{2} ~ ")" }
begin = { "(" ~ "begin" ~ exp* ~ ")" }
function = { "(" ~ ( primitive | user ) ~ exp+ ~ ")" }

// DEFINITION TYPES
def = { define | val | usex | check_expect | check_error | check_assert }

define = { "(" ~ "define" ~ func_name ~ "(" ~ parameter* ~ ")" ~ exp ~ ")" }
val =  { "(" ~ "val" ~ variable ~ exp ~ ")" }
usex =  { "(" ~ "use" ~ file_name ~ ")" }
check_expect = { "(" ~ "check-expect" ~ exp{2} ~ ")" }
check_assert = { "(" ~ "check-assert" ~ exp ~ ")" }
check_error = { "(" ~ "check-error" ~ exp ~ ")" }
