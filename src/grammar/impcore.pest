impcore = { SOI ~ ( def | exp )* ~ EOI }

// SILENTS
WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
NAMECHAR = _{ ASCII_ALPHANUMERIC | "_" } // helper

// RESERVED KEYWORDS INDEX
RESERVED = _{ TEST_KEYWORDS | PRIM_KEYWORDS | EXP_KEYWORDS | DEF_KEYWORDS | PRINT_KEYWORDS }
TEST_KEYWORDS = _{ "check-assert" | "check-error" | "check-expect" }
PRIM_KEYWORDS = _{ binary | unary | "error" }
EXP_KEYWORDS = _{ "if" | "while" | "set" | "begin" }
DEF_KEYWORDS = _{ "define" | "val" | "use" | "alloc" }
PRINT_KEYWORDS = _{ "print" | "printu" | "println" }

// LITERALS, VARIABLES, PARAMETERS
name = @{ ASCII_ALPHA ~ ( NAMECHAR | "-" )* ~ NAMECHAR* }
function_name = @{ !RESERVED ~ name ~ "?"? }
file_name = @{ ASCII_ALPHANUMERIC ~ ( NAMECHAR | "-" | "." )* }
integer_literal = @{ ( "+" | "-" )? ~ ASCII_DIGIT+ }
variable = @{ name }
parameter = @{ name }

// OPERATORS
arithmetic_operator = { "+" | "-" | "/" | "*" | "%" } // functions.rs
bitwise_operator = { ">>" | "<<" | "^" | "&" | "|" }  // functions.rs
comparison_operator = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }  // functions.rs
print_operator = { "println" | "printu" | "print" } // functions.rs
unary_operator = { "++" | "--" | "not" | "!" } // functions.rs
binary_operator = @{ comparison_operator | arithmetic_operator | bitwise_operator } // functions.rs

// EXPRESSION TYPES
exp = { error | integer_literal | accessor | control_flow | function_call } // ast.rs PAIR

// ACCESSORS
accessor = _{ array | variable } // globals.rs PAIRbk
array = { variable ~ "[" ~ exp ~ "]"  } // globals.rs

// FUNCTIONS
function_call = _{ "(" ~ ( unary | binary | print | user ) ~ ")" } // functions.rs PAIR
unary = { unary_operator ~ exp } // functions.rs
binary = { binary_operator ~ exp{2} } // functions.rs
print = { print_operator ~ exp } // functions.rs
user = { function_name ~ exp+ } // functions.rs

// FLOW
control_flow = _{ "(" ~ ( ifx | whilex | begin | error | set ) ~ ")" } // flow.rs PAIR
error = { "error" } // flow.rs
set = { "set" ~ variable ~ exp } // globals.rs
ifx = { "if" ~ exp{3} } // flow.rs
whilex = { "while" ~ exp{2} } // flow.rs
begin = { "begin" ~ exp* } // flow.rs

// GLOBAL DEFINITIONS
def = { define | val | file_use | check_expect | check_error | check_assert } // ast.rs PAIR

define = { "(" ~ "define" ~ function_name ~ "(" ~ parameter* ~ ")" ~ exp ~ ")" } // functions.rs
val =  { "(" ~ "val" ~ variable ~ exp ~ ")" } // globals.rs
alloc = { "(" ~ "alloc" ~ variable ~ "[" ~ exp ~ "]" ~ ")" } // globals.rs
file_use =  { "(" ~ "use" ~ file_name ~ ")" } // io.rs
check_expect = { "(" ~ "check-expect" ~ exp{2} ~ ")" } // tests.rs
check_assert = { "(" ~ "check-assert" ~ exp ~ ")" } // tests.rs
check_error = { "(" ~ "check-error" ~ exp ~ ")" } // tests.rs
