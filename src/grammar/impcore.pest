impcore = { SOI ~ ( top_level | WSP | COMMENT )* ~ EOI }
top_level = { def | expr | test }

COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
CHAR = _{ ASCII_ALPHANUMERIC | "_" }
WSP = _{ " " | NEWLINE } // whitespace
lpar = _{ "(" ~ WSP* } // left parenthesis
rpar = _{ WSP* ~ ")"  } // right parenthesis

literal = { ( "+" | "-" )? ~ ASCII_DIGIT+ }
var_name = { ASCII_ALPHA ~ ( CHAR | "-" )* ~ CHAR* }
func_name = { ( ASCII_ALPHA | "-" | "_"  )+ ~ "?"? }

arithmetic_op = { "+" | "-" | "/" | "*" | "%" | "mod" }
bitwise_op = { ">>" | "<<" | "^" | "&" | "|" }
comparison_op = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }
assign_op = { "set" | "$" }
unary_op = { "++" | "--" | "@" | "not" | "!" }

param_def = ${ WSP+ ~ lpar ~ ( var_name | WSP+ )* ~ rpar }
val_def = ${ "val" ~ WSP+ ~ var_name ~ arg }
func_def = ${ "define" ~ WSP+ ~ func_name ~ param_def ~ arg }

assert_test = ${ "check-assert" ~ WSP+ ~ arg } 
expect_test = ${ "check-expect" ~ ( WSP+ ~ arg ){2} } 
error_test = ${ "check-error" ~ WSP+ ~ arg }

def = { lpar ~ ( val_def | func_def ) ~ rpar}
test = { lpar ~ ( assert_test | expect_test | error_test ) ~ rpar }

binary_op = ${ comparison_op | arithmetic_op | bitwise_op | assign_op }

error_expr = { "error" }
unary_expr = ${ unary_op ~ arg }
binary_expr = ${ binary_op ~ arg{2} }
if_expr = ${ "if" ~ arg{3} }
while_expr = ${ "while" ~ arg{2} }
begin_expr = ${ "begin" ~ arg+ }
user_expr = ${ func_name ~ arg+ }

expr = { lpar ~ ( error_expr | unary_expr | binary_expr | if_expr | while_expr | user_expr ) ~ rpar }
arg = { WSP* ~ expr | WSP+ ~ ( literal | var_name )}