impcore = { SOI ~ ( def | tle | WSP )* ~ EOI }

WSP = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
LPAREN = _{ "(" ~ WSP* }
RPAREN = _{ WSP* ~ ")" }
LBRACK = _{ "[" ~ WSP* }
RBRACK = _{ WSP* ~ "]" }

keyword = _{ "define" | "alloc" | "set" | "if" | "begin" | "while" | "val" | "error" | "check-assert" | "check-expect" | "check-error" | binary_operator | unary_operator | print }
RESERVED = _{ keyword ~ WSP+ }

NUMBER = _{ ( "-" | "+" )? ~ "0x"? ~ ASCII_DIGIT+ }
NAMED = _{ !ASCII_DIGIT ~ &(ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" | "-" )* }

function_name = @{ !RESERVED ~ NAMED ~ "?"? }
literal = @{ NUMBER }
pointer = @{ variable ~ "[" } 
parameter = ${ pointer ~ RBRACK | variable }
variable = @{ NAMED }
array_value = { pointer ~ exp ~ RBRACK }
ACCESSOR = _{ literal | array_value | variable }

ARG = _{ (pointer ~ RBRACK ~ WSP* | exp) }

arithmetic_operator = { "+" | "-" | "/" | "*" | "%" | "mod" }
bitwise_operator = { ">>" | "<<" | "^" | "&" | "|" }
comparison_operator = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }
print_operator = { "println" | "printu" | "print" }
unary_operator = { "++" | "--" | "not" | "!" }
binary_operator = @{ comparison_operator | arithmetic_operator | bitwise_operator }

unary = { unary_operator ~ WSP+ ~ exp }
print = { print_operator ~ WSP+ ~ exp }
binary = { binary_operator ~ WSP+ ~ exp{2} }
user = { function_name ~ WSP+ ~ ARG+ }
FUNCTION_CALL = _{ unary | binary | print | user }

ifx = { "if" ~ WSP+ ~ exp{3} }
whilex = { "while" ~ WSP+ ~ exp{2} }
begin = { "begin" ~ WSP+ ~ exp+ }
set = { "set" ~ WSP+ ~ ( array_value | variable ) ~ WSP* ~ exp }
error = { "error" }
CONTROL_FLOW = _{ ifx | whilex | begin | set | error }

exp = _{ ( ACCESSOR | LPAREN ~ ( CONTROL_FLOW | FUNCTION_CALL ) ~ RPAREN ) ~ WSP* }

PARAMS = _{ LPAREN ~ parameter ~ ( WSP+ ~ parameter )* ~ RPAREN }
define = { "define" ~ WSP+ ~ function_name ~ WSP* ~ PARAMS ~ WSP* ~ exp }
val =  { "val" ~ WSP+ ~ variable ~ WSP+ ~ exp }
alloc = { "val" ~ WSP+ ~ pointer ~ RBRACK ~ WSP+ ~ exp }
GLOBAL = _{ define | alloc | val }

check_expect = { "check-expect" ~ WSP+ ~ exp{2} }
check_assert = { "check-assert" ~ WSP+ ~ exp }
check_error = { "check-error" ~ WSP+ ~ exp }
TEST = _{ check_expect | check_assert | check_error }

tle = { exp }
def = _{ LPAREN ~ ( GLOBAL | TEST ) ~ RPAREN }
