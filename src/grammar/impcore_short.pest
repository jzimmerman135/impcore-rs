impcore = { SOI ~ ( def | exp )* ~ EOI }

// SILENTS
WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
CHAR = _{ ASCII_ALPHANUMERIC | "_" } // helper

// LITERALS, VARIABLES
var_name = @{ ASCII_ALPHA ~ ( CHAR | "-" )* ~ CHAR* }
func_name = @{ var_name ~ "?"? }
file_name = @{ ASCII_ALPHANUMERIC ~ ( CHAR | "-" | "." )* }
integer_literal = @{ ( "+" | "-" )? ~ ASCII_DIGIT+ }

// OPERATORS
arithmetic = { "+" | "-" | "/" | "*" | "%" }
bitwise = { ">>" | "<<" | "^" | "&" | "|" }
comparison = { ">=" | ">" | "<=" | "<" | "&&" | "||" | "=" }
assignment = { "set" | "$" }

// FUNCTIONS
unary = @{ "++" | "--" | "@" | "not" | "!" }
binary = @{ comparison | arithmetic | bitwise | assignment } 
primitive = _{ unary{1} | binary{1} }
user = @{ func_name }

// DEFINITION TYPES
def = { define | val | use | check_expect | check_error | check_assert }

define = { "(" ~ "define" ~ func_name ~ "(" ~ var_name* ~ ")" ~ exp ~ ")" }
val =  { "(" ~ "val" ~ var_name ~ exp ~ ")" }
use =  { "(" ~ "use" ~ file_name ~ ")" }
check_expect = { "(" ~ "check-expect" ~ exp{2} ~ ")" }
check_assert = { "(" ~ "check-expect" ~ exp ~ ")" }
check_error = { "(" ~ "check-error" ~ exp ~ ")" }

// EXPRESSION TYPES
exp = { integer_literal | error | var_name | set | if | while | begin | function }

error = { "(" ~ "error" ~ ")" }
set = { "(" ~ "set" ~ var_name ~ exp ~ ")" }
if = { "(" ~ "if" ~ exp{3} ~ ")" }
while = { "(" ~ "while" ~ exp{2} ~ ")" }
begin = { "(" ~ "begin" ~ exp* ~ ")" }
function = { "(" ~ ( primitive | user ) ~ exp+ ~ ")" }
