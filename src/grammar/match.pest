impcore = { SOI ~ ( macrodef | def | tle | WSP )* ~ EOI }

WSP = _{ " " | NEWLINE }
COMMENT = _{ ";;" ~ ( !NEWLINE ~ ANY )* }
LPAREN = _{ "(" ~ WSP* }
RPAREN = _{ WSP* ~ ")" }
LBRACK = _{ "[" ~ WSP* }
RBRACK = _{ WSP* ~ "]" }

keyword = _{ "define" | "set" | "if" | "match" | "begin" | "while" | "val" | "error" | "check-assert" | "check-expect" | "check-error" | binary_operator | unary_operator | print }
RESERVED = _{ keyword ~ WSP+ }

NUMBER = _{ ( "-" )?  ~ ASCII_DIGIT+ }
HEXNUM = _ { ( "-" )? ~ "0x" ~ ASCII_HEX_DIGIT+ }
NAMED = _{ !ASCII_DIGIT ~ &(ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" | "-" )* }

function_name = @{ !RESERVED ~ NAMED ~ "?"? }
literal = @{ HEXNUM | NUMBER }
pointer = @{ variable ~ "[" } 
PTR = _{ pointer ~ RBRACK }
parameter = ${ PTR | variable }
variable = @{ NAMED }
array_value = { pointer ~ exp ~ RBRACK }
macroval = { "'" ~ ( NAMED )+ }
ACCESSOR = _{ (macroval | literal | array_value | variable) ~ &(WSP | RPAREN | RBRACK) }

ARG = _{ (PTR ~ WSP* | exp) }

lib = @{ LETTER* }
file = @{ ( LETTER | "/" | ".." | "./" )* ~ ".imp" }
libimport = _{ "import" ~ WSP+ ~ lib }
fileimport = _{ "import" ~ WSP+ ~ "\"" ~ file  ~ "\"" }

replacer = { "replace" ~ WSP+ ~ macroval ~ WSP+ ~ exp }
inliner = { "replace" ~ WSP+ ~ LPAREN ~ macroval ~ WSP+ ~ (WSP* ~ parameter)+ ~ RPAREN ~ WSP+ ~ exp }

macrodef = _{ "#" ~ LPAREN ~ ( fileimport | libimport | inliner | replacer ) ~ RPAREN ~ NEWLINE }

arithmetic_operator = { "+" | "-" | "/" | "*" | "%" | "mod" }
bitwise_operator = { ">>>" | ">>" | "<<" | "^" | "&&" | "||" | "&" | "|" }
comparison_operator = { ">="  | "<=" | ">" | "<" |  "=" }
print_operator = { "println" | "printu" | "print" | "printc" }
unary_operator = { "++" | "--" | "not" | "!" }
binary_operator = @{ bitwise_operator | comparison_operator | arithmetic_operator }

unary = { unary_operator ~ WSP+ ~ exp }
print = { print_operator ~ WSP+ ~ exp }
binary = { binary_operator ~ WSP+ ~ exp{2} }
user = { function_name ~ WSP* ~ ARG* }
inline = { macroval ~ WSP* ~ ARG* }
fgetc = { "fgetc" }
FUNCTION_CALL = _{ unary | binary | print | fgetc | inline | user }

matchcase = { LPAREN ~ exp ~ WSP* ~ "=>" ~ WSP* ~ exp ~ RPAREN }

ifx = { "if" ~ WSP+ ~ exp{3} }
whilex = { "while" ~ WSP+ ~ exp{2} }
begin = { "begin" ~ WSP+ ~ exp+ }
matchx = { "match" ~ WSP+ ~ exp ~ ( matchcase ~ WSP* )+ }
set = { "set" ~ WSP+ ~ ( array_value | variable ) ~ WSP* ~ exp }
error = { "error" }
CONTROL_FLOW = _{ ifx | whilex | matchx | begin | set | error }

exp = _{ ( ACCESSOR | LPAREN ~ ( CONTROL_FLOW | FUNCTION_CALL ) ~ RPAREN ) ~ WSP* }

PARAMS = _{ LPAREN ~ ( WSP* ~ parameter )* ~ RPAREN }
define = { "define" ~ WSP+ ~ function_name ~ WSP* ~ PARAMS ~ WSP* ~ exp }
val =  { "val" ~ WSP+ ~ variable ~ WSP+ ~ exp }
alloc = { "val" ~ WSP+ ~ PTR ~ WSP+ ~ exp }
GLOBAL = _{ define | alloc | val }

check_expect = { "check-expect" ~ WSP+ ~ exp{2} }
check_assert = { "check-assert" ~ WSP+ ~ exp }
check_error = { "check-error" ~ WSP+ ~ exp }
TEST = _{ check_expect | check_assert | check_error }

tle = { exp }
def = _{ LPAREN ~ ( GLOBAL | TEST ) ~ RPAREN }
