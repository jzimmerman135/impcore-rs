20
(+ 10 35)
(* 10 (+ 1 20))
(define myFunction (n) (++ n))
(myFunction 20)
(if 1 1 2)
(if (= 5 0) 1 2)
(define foo (x) 200)
(define bar (x) 5)
(define guess-ez (x) (if (= x 0) (foo 16) (bar 8)))
(guess-ez 0)
(guess-ez 1)
(define guess-num (x) (if (= x 0) 1000 (if (= x 2) 250 5)))
(guess-num 0)
(guess-num 1)
(guess-num 2)
(begin (++ 1) (* 10 10))

(define wtest (y x) (begin (while (> x 10) (+ x 4)) y))

;; (val y 10)
(while x (set y 12))
(define myBadFunc (n x y z) (begin (set n 10) (* x z) (++ y)))